/* The following code was generated by JFlex 1.4.3 on 8/5/10 6:13 PM */

/*
 * Copyright 2008 CoreMedia AG
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS
 * IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/*
 * JangarooScript lexical scanner definition for the JFlex scanner generator
 *
 * Author: Andreas Gawecki
 */

/*
From http://livedocs.adobe.com/specs/actionscript/3/as3_specification118.html:

13.1 Lexical

Lexical keywords are removed from the available program namespace during scanning. It is a syntax error to use any of
these names except as indicated by the grammar. Syntactic keywords appear to the lexical scanner as identifier tokens,
but are given special meaning in certain contexts by the parser.

The following list contains all keywords:

as break case catch class const continue default delete do else extends false finally for function if implements import
in instanceof interface internal is new null package private protected public return super switch this throw
true try typeof use var void while with

The following list contains all identifiers that are syntactic keywords:

each get set to namespace include dynamic final native override static

Former Jangaroo keywords:

abstract assert enum final goto namespace override static synchronized throws transient volatile


13.2 Syntactic

Identifiers with special meaning become keywords in certain syntactic contexts:

    * In a for-each-in statement between the 'for' token and the '(' token:
      each
    * In a function definition between the 'function' token and an identifier token:
      get set
    * As the first word of a directive:
      namespace include
    * In an attribute list or wherever an attribute list can be used:
      dynamic final native override static

It is a syntax error to use a syntactic keyword in a context where it is treated as a keyword:

namespace = "hello"
namespace()

In these cases, the grammar requires an identifier after the namespace keyword.
*/

package net.jangaroo.jooc;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/5/10 6:13 PM from the specification file
 * <tt>C:/Users/fwienber/p4/jangaroo/target/checkout/jangaroo-core/jangaroo-compiler/src/main/jflex/net/jangaroo/jooc/joo.flex</tt>
 */
class Scanner extends ScannerBase implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING_DQ = 4;
  public static final int REGEXPFIRST = 6;
  public static final int YYINITIAL = 0;
  public static final int REGEXP = 8;
  public static final int STRING_SQ = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\31\1\64\1\32"+
    "\1\0\1\6\1\73\1\67\1\75\1\51\1\52\1\5\1\71\1\60"+
    "\1\16\1\14\1\4\1\11\11\12\1\66\1\57\1\63\1\61\1\62"+
    "\1\65\1\7\4\21\1\15\1\21\24\6\1\55\1\17\1\56\1\72"+
    "\1\6\1\0\1\33\1\35\1\24\1\27\1\30\1\43\1\20\1\41"+
    "\1\22\1\6\1\37\1\25\1\45\1\23\1\42\1\46\1\6\1\36"+
    "\1\34\1\40\1\26\1\50\1\47\1\13\1\44\1\6\1\53\1\70"+
    "\1\54\1\74\53\0\1\6\12\0\1\6\4\0\1\6\5\0\27\6"+
    "\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6"+
    "\11\0\1\6\213\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6"+
    "\10\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6"+
    "\2\0\1\6\7\0\47\6\110\0\33\6\5\0\3\6\56\0\32\6"+
    "\5\0\13\6\25\0\12\10\4\0\2\6\1\0\143\6\1\0\1\6"+
    "\17\0\2\6\7\0\2\6\12\10\3\6\2\0\1\6\20\0\1\6"+
    "\1\0\36\6\35\0\3\6\60\0\46\6\13\0\1\6\u0152\0\66\6"+
    "\3\0\1\6\22\0\1\6\7\0\12\6\4\0\12\10\25\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6"+
    "\3\0\1\6\36\0\2\6\1\0\3\6\4\0\12\10\2\6\23\0"+
    "\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\37\0\4\6\1\0\1\6\7\0\12\10\2\0"+
    "\3\6\20\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\3\0\1\6\22\0\1\6\17\0\2\6\4\0"+
    "\12\10\25\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\3\0\1\6\36\0\2\6\1\0\3\6\4\0"+
    "\12\10\1\0\1\6\21\0\1\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"+
    "\3\6\3\0\10\6\1\0\3\6\55\0\11\10\25\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\46\0\2\6\4\0"+
    "\12\10\25\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\3\0\1\6\40\0\1\6\1\0\2\6\4\0\12\10\25\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\20\6\46\0\2\6\4\0"+
    "\12\10\25\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0"+
    "\7\6\72\0\60\6\1\0\2\6\14\0\7\6\11\0\12\10\47\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
    "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\0\2\6\11\0\1\6\2\0\5\6\1\0"+
    "\1\6\11\0\12\10\2\0\2\6\42\0\1\6\37\0\12\10\26\0"+
    "\10\6\1\0\42\6\35\0\4\6\164\0\42\6\1\0\5\6\1\0"+
    "\2\6\25\0\12\10\6\0\6\6\112\0\46\6\12\0\51\6\7\0"+
    "\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\47\6\1\0\23\6\16\0\11\10\56\0\125\6\14\0"+
    "\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\25\0\15\6\1\0"+
    "\4\6\16\0\22\6\16\0\22\6\16\0\15\6\1\0\3\6\17\0"+
    "\64\6\43\0\1\6\4\0\1\6\3\0\12\10\46\0\12\10\6\0"+
    "\130\6\10\0\51\6\127\0\35\6\51\0\12\10\36\6\2\0\5\6"+
    "\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0\26\6\2\0\6\6"+
    "\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6"+
    "\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6"+
    "\5\0\3\6\1\0\7\6\164\0\1\6\15\0\1\6\202\0\1\6"+
    "\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6\1\0\7\6"+
    "\3\0\3\6\5\0\5\6\u0ebb\0\2\6\52\0\5\6\5\0\2\6"+
    "\4\0\126\6\6\0\3\6\1\0\132\6\1\0\4\6\5\0\50\6"+
    "\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6"+
    "\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\0\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\14\6\164\0\5\6\1\0\207\6"+
    "\23\0\12\10\7\0\32\6\6\0\32\6\13\0\131\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\6\5\1\11\11\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\40\1\1\1\41\1\37\1\42\2\43"+
    "\1\44\1\1\2\45\1\46\1\1\1\2\1\0\1\47"+
    "\1\50\1\51\1\0\1\51\2\0\1\52\1\53\1\54"+
    "\1\55\1\56\10\5\1\57\2\5\1\60\22\5\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\2\100\1\101"+
    "\1\102\1\100\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\46\1\45\1\0\1\111\1\51\1\0\1\112\5\5"+
    "\1\113\4\5\1\114\11\5\1\115\6\5\1\116\6\5"+
    "\1\117\1\5\1\120\1\121\1\122\1\123\1\124\2\0"+
    "\1\125\5\5\1\126\1\5\1\127\6\5\1\130\4\5"+
    "\1\131\1\132\11\5\1\133\1\5\1\134\1\135\1\136"+
    "\1\0\5\5\1\137\1\140\1\141\4\5\1\142\1\5"+
    "\1\143\1\5\1\144\3\5\1\145\4\5\1\146\5\5"+
    "\1\147\1\5\1\150\2\5\1\151\1\152\1\153\2\5"+
    "\1\154\11\5\1\155\1\156\1\157\1\5\1\160\1\161"+
    "\1\5\1\0\1\5\1\162\2\5\1\163\1\164\1\5"+
    "\1\0\1\5\1\165\1\5\1\166\1\167\1\170\1\171";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u0136"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u0136\0\u04d8\0\u0516"+
    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0136"+
    "\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u0136\0\u07fe\0\u083c\0\u087a\0\u08b8"+
    "\0\u08f6\0\u0934\0\u0136\0\u0136\0\u0972\0\u09b0\0\u0136\0\u09ee"+
    "\0\u0136\0\u0a2c\0\u0136\0\u0136\0\u0a6a\0\u0136\0\u0aa8\0\u0ae6"+
    "\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0136\0\u0136\0\u0c5a"+
    "\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0136\0\u0136\0\u0d90\0\u022e"+
    "\0\u022e\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u022e\0\u0fbe\0\u0ffc\0\u022e\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496"+
    "\0\u0136\0\u14d4\0\u0136\0\u1512\0\u1550\0\u0136\0\u0136\0\u0136"+
    "\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136\0\u158e"+
    "\0\u0136\0\u0136\0\u15cc\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136"+
    "\0\u0136\0\u160a\0\u0136\0\u1648\0\u0c98\0\u1686\0\u1686\0\u0136"+
    "\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u022e\0\u17fa\0\u1838"+
    "\0\u1876\0\u18b4\0\u022e\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea"+
    "\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u022e\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\u1c18\0\u1c56\0\u022e\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e"+
    "\0\u1d8c\0\u1dca\0\u022e\0\u1e08\0\u0136\0\u0136\0\u1e46\0\u0136"+
    "\0\u0136\0\u1e84\0\u1ec2\0\u0136\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba"+
    "\0\u1ff8\0\u022e\0\u2036\0\u022e\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u022e\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u022e"+
    "\0\u022e\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454"+
    "\0\u2492\0\u24d0\0\u022e\0\u250e\0\u022e\0\u0136\0\u0136\0\u158e"+
    "\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u022e\0\u022e\0\u022e"+
    "\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u022e\0\u277a\0\u022e\0\u27b8"+
    "\0\u022e\0\u27f6\0\u2834\0\u2872\0\u022e\0\u28b0\0\u28ee\0\u292c"+
    "\0\u296a\0\u022e\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u022e"+
    "\0\u2ade\0\u022e\0\u2b1c\0\u2b5a\0\u022e\0\u022e\0\u022e\0\u2b98"+
    "\0\u2bd6\0\u022e\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a"+
    "\0\u2d88\0\u2dc6\0\u2e04\0\u022e\0\u022e\0\u022e\0\u2e42\0\u022e"+
    "\0\u022e\0\u2e80\0\u2ebe\0\u2efc\0\u022e\0\u2f3a\0\u2f78\0\u022e"+
    "\0\u022e\0\u2fb6\0\u2ff4\0\u3032\0\u022e\0\u3070\0\u022e\0\u0136"+
    "\0\u022e\0\u022e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\2\10\1\11\1\12\2\13\1\6\1\14"+
    "\1\15\1\13\1\16\1\13\1\17\1\6\2\13\1\20"+
    "\1\21\1\22\1\13\1\23\1\24\1\25\1\10\1\26"+
    "\1\27\1\30\1\31\1\32\1\13\1\33\2\13\1\34"+
    "\2\13\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\14\65\1\70\55\65\1\71"+
    "\1\72\1\66\1\67\14\72\1\70\12\72\1\73\43\72"+
    "\1\74\1\75\1\76\1\74\2\6\11\74\1\77\56\74"+
    "\1\100\1\101\1\76\1\100\1\102\12\100\1\103\56\100"+
    "\100\0\1\10\77\0\1\104\1\105\53\0\1\106\75\0"+
    "\1\107\22\0\6\13\1\0\1\13\2\0\11\13\2\0"+
    "\16\13\36\0\2\110\1\111\1\112\1\113\12\0\1\113"+
    "\56\0\2\15\1\0\1\112\1\113\12\0\1\113\56\0"+
    "\2\112\1\0\1\114\77\0\1\115\42\0\1\116\22\0"+
    "\6\13\1\0\1\13\2\0\3\13\1\117\5\13\2\0"+
    "\1\13\1\120\6\13\1\121\1\13\1\122\3\13\33\0"+
    "\6\13\1\0\1\13\2\0\6\13\1\123\1\13\1\124"+
    "\2\0\16\13\33\0\6\13\1\0\1\13\2\0\5\13"+
    "\1\125\3\13\2\0\1\126\6\13\1\127\6\13\33\0"+
    "\6\13\1\0\1\13\2\0\11\13\2\0\1\13\1\130"+
    "\14\13\33\0\6\13\1\0\1\13\2\0\10\13\1\131"+
    "\2\0\7\13\1\132\6\13\33\0\5\13\1\133\1\0"+
    "\1\13\2\0\5\13\1\134\3\13\2\0\16\13\33\0"+
    "\6\13\1\0\1\13\2\0\11\13\2\0\1\13\1\135"+
    "\14\13\33\0\6\13\1\0\1\13\2\0\6\13\1\136"+
    "\2\13\2\0\14\13\1\137\1\13\33\0\6\13\1\0"+
    "\1\13\2\0\11\13\2\0\3\13\1\140\12\13\33\0"+
    "\6\13\1\0\1\13\2\0\10\13\1\141\2\0\16\13"+
    "\33\0\6\13\1\0\1\13\2\0\11\13\2\0\3\13"+
    "\1\142\2\13\1\143\2\13\1\144\4\13\33\0\6\13"+
    "\1\0\1\13\2\0\2\13\1\145\3\13\1\146\2\13"+
    "\2\0\1\147\6\13\1\150\6\13\33\0\6\13\1\0"+
    "\1\13\2\0\6\13\1\151\2\13\2\0\1\152\2\13"+
    "\1\153\12\13\33\0\6\13\1\0\1\13\2\0\2\13"+
    "\1\154\6\13\2\0\6\13\1\155\7\13\33\0\6\13"+
    "\1\0\1\13\2\0\11\13\2\0\1\156\6\13\1\157"+
    "\6\13\106\0\1\160\75\0\1\161\1\162\74\0\1\163"+
    "\1\0\1\164\73\0\1\165\102\0\1\166\70\0\1\167"+
    "\5\0\1\170\67\0\1\171\6\0\1\172\66\0\1\173"+
    "\7\0\1\174\65\0\1\175\75\0\1\176\14\0\1\65"+
    "\2\0\14\65\1\0\55\65\3\0\1\67\73\0\2\177"+
    "\1\0\10\177\1\200\3\177\1\201\3\177\1\202\2\177"+
    "\1\203\3\177\1\204\2\177\1\205\1\206\1\177\1\207"+
    "\2\177\1\210\31\177\1\211\1\72\2\0\14\72\1\0"+
    "\12\72\1\0\43\72\2\0\1\76\73\0\2\74\1\0"+
    "\73\74\2\100\1\0\1\100\1\0\12\100\1\0\60\100"+
    "\1\76\1\100\1\0\12\100\1\0\56\100\20\0\1\212"+
    "\1\0\1\212\22\0\1\212\30\0\2\213\1\0\73\213"+
    "\1\104\1\7\1\10\73\104\5\105\1\214\70\105\11\0"+
    "\2\110\1\0\1\112\1\113\12\0\1\113\56\0\2\215"+
    "\2\0\1\215\3\0\1\215\2\0\1\215\2\0\2\215"+
    "\2\0\1\215\1\0\1\215\5\0\1\215\43\0\2\112"+
    "\2\0\1\113\12\0\1\113\56\0\2\216\3\0\1\217"+
    "\52\0\1\217\20\0\1\220\67\0\6\13\1\0\1\13"+
    "\2\0\4\13\1\221\4\13\2\0\1\13\1\222\3\13"+
    "\1\223\10\13\33\0\6\13\1\0\1\13\2\0\11\13"+
    "\2\0\13\13\1\224\2\13\33\0\6\13\1\0\1\13"+
    "\2\0\5\13\1\225\3\13\2\0\16\13\33\0\6\13"+
    "\1\0\1\13\2\0\11\13\2\0\14\13\1\226\1\13"+
    "\33\0\6\13\1\0\1\13\2\0\11\13\2\0\1\227"+
    "\15\13\33\0\6\13\1\0\1\13\2\0\11\13\2\0"+
    "\1\13\1\230\3\13\1\231\10\13\33\0\6\13\1\0"+
    "\1\13\2\0\3\13\1\232\5\13\2\0\16\13\33\0"+
    "\6\13\1\0\1\13\2\0\10\13\1\233\2\0\16\13"+
    "\33\0\6\13\1\0\1\13\2\0\5\13\1\234\3\13"+
    "\2\0\10\13\1\235\5\13\33\0\6\13\1\0\1\13"+
    "\2\0\11\13\2\0\5\13\1\236\10\13\33\0\6\13"+
    "\1\0\1\13\2\0\11\13\2\0\1\13\1\237\14\13"+
    "\33\0\6\13\1\0\1\13\2\0\11\13\2\0\13\13"+
    "\1\240\2\13\33\0\6\13\1\0\1\13\2\0\2\13"+
    "\1\241\6\13\2\0\16\13\33\0\6\13\1\0\1\13"+
    "\2\0\10\13\1\242\2\0\16\13\33\0\6\13\1\0"+
    "\1\13\2\0\11\13\2\0\5\13\1\243\10\13\33\0"+
    "\6\13\1\0\1\13\2\0\6\13\1\244\2\13\2\0"+
    "\11\13\1\245\4\13\33\0\6\13\1\0\1\13\2\0"+
    "\2\13\1\246\6\13\2\0\3\13\1\247\12\13\33\0"+
    "\6\13\1\0\1\13\2\0\11\13\2\0\13\13\1\250"+
    "\2\13\33\0\6\13\1\0\1\13\2\0\3\13\1\251"+
    "\5\13\2\0\16\13\33\0\6\13\1\0\1\13\2\0"+
    "\3\13\1\252\5\13\2\0\16\13\33\0\6\13\1\0"+
    "\1\13\2\0\5\13\1\253\3\13\2\0\16\13\33\0"+
    "\6\13\1\0\1\13\2\0\11\13\2\0\3\13\1\254"+
    "\12\13\33\0\6\13\1\0\1\13\2\0\11\13\2\0"+
    "\2\13\1\255\13\13\33\0\6\13\1\0\1\13\2\0"+
    "\4\13\1\256\4\13\2\0\16\13\33\0\6\13\1\0"+
    "\1\13\2\0\2\13\1\257\6\13\2\0\7\13\1\260"+
    "\6\13\33\0\6\13\1\0\1\13\2\0\11\13\2\0"+
    "\5\13\1\261\10\13\33\0\6\13\1\0\1\13\2\0"+
    "\2\13\1\262\6\13\2\0\16\13\33\0\6\13\1\0"+
    "\1\13\2\0\11\13\2\0\3\13\1\263\12\13\33\0"+
    "\6\13\1\0\1\13\2\0\2\13\1\264\6\13\2\0"+
    "\16\13\106\0\1\265\75\0\1\266\1\267\74\0\1\270"+
    "\75\0\1\271\25\0\2\272\2\0\1\272\3\0\1\272"+
    "\2\0\1\272\2\0\2\272\2\0\1\272\1\0\1\272"+
    "\5\0\1\272\43\0\2\273\2\0\1\273\3\0\1\273"+
    "\2\0\1\273\2\0\2\273\2\0\1\273\1\0\1\273"+
    "\5\0\1\273\40\0\1\274\4\0\1\274\1\0\1\274"+
    "\2\0\1\212\1\274\1\212\6\274\2\0\12\274\1\212"+
    "\3\274\25\0\4\105\1\10\1\214\70\105\11\0\2\216"+
    "\71\0\6\13\1\0\1\13\2\0\5\13\1\275\3\13"+
    "\2\0\16\13\33\0\6\13\1\0\1\13\2\0\11\13"+
    "\2\0\5\13\1\276\10\13\33\0\6\13\1\0\1\13"+
    "\2\0\10\13\1\277\2\0\16\13\33\0\6\13\1\0"+
    "\1\13\2\0\5\13\1\300\3\13\2\0\7\13\1\301"+
    "\6\13\33\0\6\13\1\0\1\13\2\0\5\13\1\302"+
    "\3\13\2\0\16\13\33\0\6\13\1\0\1\13\2\0"+
    "\11\13\2\0\1\13\1\303\14\13\33\0\6\13\1\0"+
    "\1\13\2\0\10\13\1\304\2\0\16\13\33\0\6\13"+
    "\1\0\1\13\2\0\4\13\1\305\4\13\2\0\16\13"+
    "\33\0\6\13\1\0\1\13\2\0\11\13\2\0\1\13"+
    "\1\306\3\13\1\307\10\13\33\0\6\13\1\0\1\13"+
    "\2\0\10\13\1\310\2\0\16\13\33\0\6\13\1\0"+
    "\1\13\2\0\11\13\2\0\1\311\15\13\33\0\6\13"+
    "\1\0\1\13\2\0\10\13\1\312\2\0\16\13\33\0"+
    "\6\13\1\0\1\13\2\0\10\13\1\313\2\0\16\13"+
    "\33\0\6\13\1\0\1\13\2\0\10\13\1\314\2\0"+
    "\16\13\33\0\6\13\1\0\1\13\2\0\11\13\2\0"+
    "\5\13\1\315\10\13\33\0\6\13\1\0\1\13\2\0"+
    "\11\13\2\0\1\316\15\13\33\0\6\13\1\0\1\13"+
    "\2\0\6\13\1\317\2\13\2\0\16\13\33\0\6\13"+
    "\1\0\1\13\2\0\10\13\1\320\2\0\16\13\33\0"+
    "\6\13\1\0\1\13\2\0\11\13\2\0\1\13\1\321"+
    "\14\13\33\0\6\13\1\0\1\13\2\0\11\13\2\0"+
    "\7\13\1\322\6\13\33\0\6\13\1\0\1\13\2\0"+
    "\10\13\1\323\2\0\16\13\33\0\6\13\1\0\1\13"+
    "\2\0\11\13\2\0\1\324\15\13\33\0\6\13\1\0"+
    "\1\13\2\0\4\13\1\325\4\13\2\0\16\13\33\0"+
    "\6\13\1\0\1\13\2\0\11\13\2\0\1\13\1\326"+
    "\14\13\33\0\6\13\1\0\1\13\2\0\5\13\1\327"+
    "\3\13\2\0\16\13\33\0\6\13\1\0\1\13\2\0"+
    "\11\13\2\0\4\13\1\330\11\13\33\0\6\13\1\0"+
    "\1\13\2\0\11\13\2\0\15\13\1\331\33\0\6\13"+
    "\1\0\1\13\2\0\11\13\2\0\5\13\1\332\10\13"+
    "\33\0\6\13\1\0\1\13\2\0\11\13\2\0\6\13"+
    "\1\333\7\13\33\0\6\13\1\0\1\13\2\0\5\13"+
    "\1\334\3\13\2\0\16\13\33\0\6\13\1\0\1\13"+
    "\2\0\7\13\1\335\1\13\2\0\16\13\106\0\1\336"+
    "\25\0\2\337\2\0\1\337\3\0\1\337\2\0\1\337"+
    "\2\0\2\337\2\0\1\337\1\0\1\337\5\0\1\337"+
    "\43\0\2\340\2\0\1\340\3\0\1\340\2\0\1\340"+
    "\2\0\2\340\2\0\1\340\1\0\1\340\5\0\1\340"+
    "\40\0\6\13\1\0\1\13\2\0\6\13\1\341\2\13"+
    "\2\0\16\13\33\0\6\13\1\0\1\13\2\0\11\13"+
    "\2\0\1\342\15\13\33\0\6\13\1\0\1\13\2\0"+
    "\11\13\2\0\3\13\1\343\12\13\33\0\6\13\1\0"+
    "\1\13\2\0\10\13\1\344\2\0\16\13\33\0\6\13"+
    "\1\0\1\13\2\0\11\13\2\0\3\13\1\345\12\13"+
    "\33\0\6\13\1\0\1\13\2\0\11\13\2\0\1\13"+
    "\1\346\14\13\33\0\6\13\1\0\1\13\2\0\11\13"+
    "\2\0\6\13\1\347\7\13\33\0\6\13\1\0\1\13"+
    "\2\0\11\13\2\0\5\13\1\350\10\13\33\0\6\13"+
    "\1\0\1\13\2\0\2\13\1\351\6\13\2\0\16\13"+
    "\33\0\6\13\1\0\1\13\2\0\11\13\2\0\5\13"+
    "\1\352\10\13\33\0\6\13\1\0\1\13\2\0\6\13"+
    "\1\353\2\13\2\0\16\13\33\0\6\13\1\0\1\13"+
    "\2\0\3\13\1\354\5\13\2\0\16\13\33\0\6\13"+
    "\1\0\1\13\2\0\11\13\2\0\3\13\1\355\12\13"+
    "\33\0\6\13\1\0\1\13\2\0\4\13\1\356\4\13"+
    "\2\0\16\13\33\0\6\13\1\0\1\13\2\0\11\13"+
    "\2\0\4\13\1\357\11\13\33\0\6\13\1\0\1\13"+
    "\2\0\11\13\2\0\3\13\1\360\12\13\33\0\6\13"+
    "\1\0\1\13\2\0\11\13\2\0\14\13\1\361\1\13"+
    "\33\0\6\13\1\0\1\13\2\0\11\13\2\0\7\13"+
    "\1\362\6\13\33\0\6\13\1\0\1\13\2\0\5\13"+
    "\1\363\3\13\2\0\16\13\33\0\6\13\1\0\1\13"+
    "\2\0\11\13\2\0\5\13\1\364\10\13\33\0\6\13"+
    "\1\0\1\13\2\0\10\13\1\365\2\0\16\13\33\0"+
    "\6\13\1\0\1\13\2\0\2\13\1\366\6\13\2\0"+
    "\16\13\33\0\6\13\1\0\1\13\2\0\11\13\2\0"+
    "\1\367\15\13\33\0\6\13\1\0\1\13\2\0\11\13"+
    "\2\0\1\370\15\13\33\0\6\13\1\0\1\13\2\0"+
    "\10\13\1\371\2\0\16\13\33\0\6\13\1\0\1\13"+
    "\2\0\10\13\1\372\2\0\16\13\33\0\6\13\1\0"+
    "\1\13\2\0\7\13\1\373\1\13\2\0\16\13\33\0"+
    "\6\13\1\0\1\13\2\0\3\13\1\374\5\13\2\0"+
    "\16\13\33\0\6\13\1\0\1\13\2\0\3\13\1\375"+
    "\5\13\2\0\10\13\1\376\5\13\33\0\6\13\1\0"+
    "\1\13\2\0\11\13\2\0\12\13\1\377\3\13\33\0"+
    "\6\13\1\0\1\13\2\0\11\13\2\0\5\13\1\u0100"+
    "\10\13\33\0\6\13\1\0\1\13\2\0\3\13\1\u0101"+
    "\5\13\2\0\16\13\33\0\6\13\1\0\1\13\2\0"+
    "\10\13\1\u0102\2\0\16\13\33\0\6\13\1\0\1\13"+
    "\2\0\5\13\1\u0103\3\13\2\0\16\13\33\0\6\13"+
    "\1\0\1\13\2\0\7\13\1\u0104\1\13\2\0\16\13"+
    "\33\0\6\13\1\0\1\13\2\0\11\13\2\0\6\13"+
    "\1\u0105\7\13\33\0\6\13\1\0\1\13\2\0\3\13"+
    "\1\u0106\5\13\2\0\16\13\33\0\6\13\1\0\1\13"+
    "\2\0\11\13\2\0\10\13\1\u0107\5\13\33\0\6\13"+
    "\1\0\1\13\2\0\5\13\1\u0108\3\13\2\0\16\13"+
    "\33\0\6\13\1\0\1\13\2\0\2\13\1\u0109\6\13"+
    "\2\0\16\13\33\0\6\13\1\0\1\13\2\0\4\13"+
    "\1\u010a\4\13\2\0\16\13\33\0\6\13\1\0\1\13"+
    "\2\0\1\u010b\10\13\2\0\16\13\33\0\6\13\1\0"+
    "\1\13\2\0\11\13\2\0\5\13\1\u010c\10\13\33\0"+
    "\6\13\1\0\1\13\2\0\4\13\1\u010d\4\13\2\0"+
    "\16\13\33\0\6\13\1\0\1\13\2\0\10\13\1\u010e"+
    "\2\0\16\13\33\0\6\13\1\0\1\13\2\0\4\13"+
    "\1\u010f\4\13\2\0\16\13\33\0\6\13\1\0\1\13"+
    "\2\0\11\13\2\0\1\u0110\15\13\33\0\6\13\1\0"+
    "\1\13\2\0\11\13\2\0\1\u0111\15\13\33\0\6\13"+
    "\1\0\1\13\2\0\10\13\1\u0112\2\0\16\13\33\0"+
    "\6\13\1\0\1\13\2\0\6\13\1\u0113\2\13\2\0"+
    "\16\13\33\0\6\13\1\0\1\13\2\0\11\13\2\0"+
    "\5\13\1\u0114\10\13\33\0\6\13\1\0\1\13\2\0"+
    "\11\13\2\0\1\13\1\u0115\14\13\33\0\6\13\1\0"+
    "\1\13\2\0\11\13\2\0\11\13\1\u0116\4\13\33\0"+
    "\6\13\1\0\1\13\2\0\11\13\2\0\7\13\1\u0117"+
    "\6\13\33\0\6\13\1\0\1\13\2\0\10\13\1\u0118"+
    "\2\0\16\13\33\0\6\13\1\0\1\13\2\0\10\13"+
    "\1\u0119\2\0\16\13\33\0\6\13\1\0\1\13\2\0"+
    "\11\13\2\0\5\13\1\u011a\10\13\33\0\6\13\1\0"+
    "\1\13\2\0\11\13\1\u011b\1\0\16\13\33\0\6\13"+
    "\1\0\1\13\2\0\10\13\1\u011c\2\0\16\13\33\0"+
    "\6\13\1\0\1\13\2\0\5\13\1\u011d\3\13\2\0"+
    "\16\13\33\0\6\13\1\0\1\13\2\0\4\13\1\u011e"+
    "\4\13\2\0\16\13\33\0\6\13\1\0\1\13\2\0"+
    "\3\13\1\u011f\5\13\2\0\16\13\33\0\6\13\1\0"+
    "\1\13\2\0\10\13\1\u0120\2\0\16\13\33\0\6\13"+
    "\1\0\1\13\2\0\3\13\1\u0121\5\13\2\0\16\13"+
    "\33\0\6\13\1\0\1\13\2\0\10\13\1\u0122\2\0"+
    "\16\13\57\0\1\u0123\51\0\6\13\1\0\1\13\2\0"+
    "\11\13\2\0\7\13\1\u0124\6\13\33\0\6\13\1\0"+
    "\1\13\2\0\10\13\1\u0125\2\0\16\13\33\0\6\13"+
    "\1\0\1\13\2\0\11\13\2\0\5\13\1\u0126\10\13"+
    "\33\0\6\13\1\0\1\13\2\0\7\13\1\u0127\1\13"+
    "\2\0\16\13\25\0\32\u0123\1\u0128\43\u0123\6\0\6\13"+
    "\1\0\1\13\2\0\11\13\2\0\10\13\1\u0129\5\13"+
    "\33\0\6\13\1\0\1\13\2\0\11\13\2\0\1\13"+
    "\1\u012a\14\13\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12462];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\15\1\1\11\11\1\10\11"+
    "\4\1\1\11\6\1\2\11\2\1\1\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\6\1\1\0\2\11\1\1"+
    "\1\0\1\1\2\0\2\11\42\1\1\11\1\1\1\11"+
    "\2\1\12\11\1\1\2\11\1\1\6\11\1\1\1\11"+
    "\1\0\2\1\1\0\1\11\44\1\2\11\1\1\2\11"+
    "\2\0\1\11\41\1\2\11\1\0\72\1\1\0\7\1"+
    "\1\0\4\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  
  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** the stack of open (nested) input streams to read from */
  private java.util.Stack zzStreams = new java.util.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtEOF;
    boolean zzEOFDone;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, 
                  char [] zzBuffer, boolean zzAtEOF, boolean zzEOFDone, int yyline, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }

  /* user code: */

  protected JooSymbol symbol(int type) {
    lastToken = type;
    JooSymbol result = new JooSymbol(type, fileName, yyline + 1, yycolumn + 1, whitespace, yytext());
    whitespace = "";
    return result;
  }

  protected JooSymbol symbol(int type, Object value) {
    lastToken = type;
    JooSymbol result = new JooSymbol(type, fileName, yyline + 1, yycolumn + 1, whitespace, yytext(), value);
    whitespace = "";
    return result;
  }

  protected JooSymbol multiStateSymbol(int type, Object value) {
    lastToken = type;
    JooSymbol result = new JooSymbol(type, fileName, yyline + 1, yycolumn + 1, whitespace, multiStateText, value);
    whitespace = "";
    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1314) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }
    
    // numRead < 0) 
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtEOF, zzEOFDone,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos ;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol scan() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { return symbol(GTEQ);
          }
        case 122: break;
        case 27: 
          { return symbol(XOR);
          }
        case 123: break;
        case 19: 
          { return symbol(GT);
          }
        case 124: break;
        case 94: 
          { multiStateText += yytext();
                                   char val = (char) Integer.parseInt(yytext().substring(2),16);
                        	   string.append(val);
          }
        case 125: break;
        case 89: 
          { return symbol(BOOL_LITERAL, new Boolean(true));
          }
        case 126: break;
        case 79: 
          { return symbol(VAR);
          }
        case 127: break;
        case 5: 
          { return symbol(IDE, yytext());
          }
        case 128: break;
        case 54: 
          { return symbol(NOTEQ);
          }
        case 129: break;
        case 12: 
          { return symbol(LBRACE);
          }
        case 130: break;
        case 18: 
          { return symbol(EQ);
          }
        case 131: break;
        case 42: 
          { return symbol(MINUSMINUS);
          }
        case 132: break;
        case 86: 
          { return symbol(NULL_LITERAL, null);
          }
        case 133: break;
        case 115: 
          { return symbol(CONTINUE);
          }
        case 134: break;
        case 76: 
          { return symbol(USE);
          }
        case 135: break;
        case 47: 
          { return symbol(DO);
          }
        case 136: break;
        case 45: 
          { return symbol(IS);
          }
        case 137: break;
        case 69: 
          { multiStateText += yytext(); string.append( '\r' );
          }
        case 138: break;
        case 61: 
          { return symbol(PLUSPLUS);
          }
        case 139: break;
        case 68: 
          { multiStateText += yytext(); string.append( '\b' );
          }
        case 140: break;
        case 20: 
          { return symbol(LT);
          }
        case 141: break;
        case 110: 
          { return symbol(EXTENDS);
          }
        case 142: break;
        case 56: 
          { return symbol(ANDEQ);
          }
        case 143: break;
        case 108: 
          { return symbol(PUBLIC);
          }
        case 144: break;
        case 63: 
          { return symbol(MODEQ);
          }
        case 145: break;
        case 67: 
          { multiStateText += yytext(); string.append( '\"' );
          }
        case 146: break;
        case 6: 
          { return symbol(INT_LITERAL, new Integer(yytext()));
          }
        case 147: break;
        case 72: 
          { multiStateText += yytext(); string.append( '\'' );
          }
        case 148: break;
        case 2: 
          { whitespace += yytext();
          }
        case 149: break;
        case 65: 
          { multiStateText += yytext(); string.append( '\\' );
          }
        case 150: break;
        case 100: 
          { return symbol(THROW);
          }
        case 151: break;
        case 44: 
          { return symbol(IN);
          }
        case 152: break;
        case 31: 
          { multiStateText += yytext(); string.append( yytext() );
          }
        case 153: break;
        case 49: 
          { return symbol(EQEQ);
          }
        case 154: break;
        case 121: 
          { return symbol(IMPLEMENTS);
          }
        case 155: break;
        case 91: 
          { return symbol(WITH);
          }
        case 156: break;
        case 101: 
          { return symbol(BOOL_LITERAL, new Boolean(false));
          }
        case 157: break;
        case 25: 
          { return symbol(OR);
          }
        case 158: break;
        case 26: 
          { return symbol(PLUS);
          }
        case 159: break;
        case 11: 
          { return symbol(RPAREN);
          }
        case 160: break;
        case 97: 
          { return symbol(CONST);
          }
        case 161: break;
        case 36: 
          { error("unterminated regular expression at end of line");
          }
        case 162: break;
        case 51: 
          { return symbol(RSHIFT);
          }
        case 163: break;
        case 95: 
          { return symbol(CLASS);
          }
        case 164: break;
        case 90: 
          { return symbol(THIS);
          }
        case 165: break;
        case 9: 
          { multiStateText = yytext(); yybegin(STRING_DQ); string.setLength(0);
          }
        case 166: break;
        case 71: 
          { multiStateText += yytext(); string.append( '\f' );
          }
        case 167: break;
        case 40: 
          { return symbol(MULTEQ);
          }
        case 168: break;
        case 113: 
          { return symbol(PRIVATE);
          }
        case 169: break;
        case 55: 
          { return symbol(NAMESPACESEP);
          }
        case 170: break;
        case 82: 
          { return symbol(URSHIFT);
          }
        case 171: break;
        case 1: 
          { char ch = yytext().charAt(0);
                                    String hex = Integer.toHexString((int)ch);
                                    while (hex.length() < 4)
                                      hex = "0"+hex;
                                    error("illegal character: \\u" + hex);
          }
        case 172: break;
        case 111: 
          { return symbol(FINALLY);
          }
        case 173: break;
        case 93: 
          { return symbol(URSHIFTEQ);
          }
        case 174: break;
        case 78: 
          { return symbol(FOR);
          }
        case 175: break;
        case 4: 
          { return symbol(MUL);
          }
        case 176: break;
        case 75: 
          { return symbol(NEW);
          }
        case 177: break;
        case 33: 
          { multiStateText += yytext(); yybegin(YYINITIAL); return multiStateSymbol(STRING_LITERAL, string.toString());
          }
        case 178: break;
        case 109: 
          { return symbol(DEFAULT);
          }
        case 179: break;
        case 22: 
          { return symbol(QUESTION);
          }
        case 180: break;
        case 46: 
          { return symbol(IF);
          }
        case 181: break;
        case 119: 
          { yypushStream(createIncludeReader(yytext()));
          }
        case 182: break;
        case 112: 
          { return symbol(PACKAGE);
          }
        case 183: break;
        case 37: 
          { multiStateText += yytext(); string.append(yytext());
          }
        case 184: break;
        case 62: 
          { return symbol(XOREQ);
          }
        case 185: break;
        case 38: 
          { multiStateText += yytext();
                                    yybegin(YYINITIAL);
                                    return multiStateSymbol(REGEXP_LITERAL, string.toString());
          }
        case 186: break;
        case 105: 
          { return symbol(SWITCH);
          }
        case 187: break;
        case 83: 
          { return symbol(LSHIFTEQ);
          }
        case 188: break;
        case 28: 
          { return symbol(MOD);
          }
        case 189: break;
        case 10: 
          { return symbol(LPAREN);
          }
        case 190: break;
        case 53: 
          { return symbol(LSHIFT);
          }
        case 191: break;
        case 99: 
          { return symbol(BREAK);
          }
        case 192: break;
        case 43: 
          { return symbol(MINUSEQ);
          }
        case 193: break;
        case 32: 
          { error("Unterminated string at end of line");
          }
        case 194: break;
        case 3: 
          { if (!maybeExpr())
                                      return symbol(DIV);
                                    multiStateText = yytext();
                                    yybegin(REGEXPFIRST);
                                    string.setLength(0);
          }
        case 195: break;
        case 104: 
          { return symbol(DELETE);
          }
        case 196: break;
        case 77: 
          { return symbol(TRY);
          }
        case 197: break;
        case 58: 
          { return symbol(OREQ);
          }
        case 198: break;
        case 41: 
          { return symbol(FLOAT_LITERAL, new Double(yytext()));
          }
        case 199: break;
        case 120: 
          { return symbol(INSTANCEOF);
          }
        case 200: break;
        case 15: 
          { return symbol(RBRACK);
          }
        case 201: break;
        case 16: 
          { return symbol(SEMICOLON);
          }
        case 202: break;
        case 103: 
          { return symbol(IMPORT);
          }
        case 203: break;
        case 34: 
          { multiStateText += yytext(); yybegin(YYINITIAL);
                                    return multiStateSymbol(STRING_LITERAL, string.toString());
          }
        case 204: break;
        case 98: 
          { return symbol(SUPER);
          }
        case 205: break;
        case 87: 
          { return symbol(CASE);
          }
        case 206: break;
        case 84: 
          { return symbol(NOTEQEQ);
          }
        case 207: break;
        case 8: 
          { return symbol(MINUS);
          }
        case 208: break;
        case 70: 
          { multiStateText += yytext(); string.append( '\t' );
          }
        case 209: break;
        case 7: 
          { return symbol(DOT);
          }
        case 210: break;
        case 85: 
          { error("invalid regular expression flag: '" +
                                      yytext().charAt(yytext().length()-1) + "'");
          }
        case 211: break;
        case 81: 
          { return symbol(RSHIFTEQ);
          }
        case 212: break;
        case 118: 
          { return symbol(PROTECTED);
          }
        case 213: break;
        case 24: 
          { return symbol(AND);
          }
        case 214: break;
        case 30: 
          { multiStateText = yytext(); yybegin(STRING_SQ); string.setLength(0);
          }
        case 215: break;
        case 64: 
          { error("Illegal escape sequence");
          }
        case 216: break;
        case 80: 
          { return symbol(EQEQEQ);
          }
        case 217: break;
        case 23: 
          { return symbol(COLON);
          }
        case 218: break;
        case 52: 
          { return symbol(LTEQ);
          }
        case 219: break;
        case 73: 
          { return symbol(INT_LITERAL, Long.parseLong(yytext().substring(2),16));
          }
        case 220: break;
        case 116: 
          { return symbol(FUNCTION);
          }
        case 221: break;
        case 92: 
          { return symbol(VOID);
          }
        case 222: break;
        case 29: 
          { return symbol(BITNOT);
          }
        case 223: break;
        case 74: 
          { return symbol(REST);
          }
        case 224: break;
        case 21: 
          { return symbol(NOT);
          }
        case 225: break;
        case 13: 
          { return symbol(RBRACE);
          }
        case 226: break;
        case 66: 
          { multiStateText += yytext(); string.append( '\n' );
          }
        case 227: break;
        case 39: 
          { if (!maybeExpr())
                                      return symbol(DIVEQ);
                                    multiStateText = yytext();
                                    yybegin(REGEXP);
                                    string.setLength(0);
                                    string.append('=');
          }
        case 228: break;
        case 14: 
          { return symbol(LBRACK);
          }
        case 229: break;
        case 59: 
          { return symbol(OROR);
          }
        case 230: break;
        case 48: 
          { return symbol(AS);
          }
        case 231: break;
        case 117: 
          { return symbol(INTERFACE);
          }
        case 232: break;
        case 107: 
          { return symbol(TYPEOF);
          }
        case 233: break;
        case 35: 
          { multiStateText += yytext(); string.append(yytext()); yybegin(REGEXP);
          }
        case 234: break;
        case 57: 
          { return symbol(ANDAND);
          }
        case 235: break;
        case 102: 
          { return symbol(WHILE);
          }
        case 236: break;
        case 114: 
          { return symbol(INTERNAL);
          }
        case 237: break;
        case 60: 
          { return symbol(PLUSEQ);
          }
        case 238: break;
        case 88: 
          { return symbol(ELSE);
          }
        case 239: break;
        case 96: 
          { return symbol(CATCH);
          }
        case 240: break;
        case 17: 
          { return symbol(COMMA);
          }
        case 241: break;
        case 106: 
          { return symbol(RETURN);
          }
        case 242: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                if (yymoreStreams()) yypopStream(); else return symbol(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
